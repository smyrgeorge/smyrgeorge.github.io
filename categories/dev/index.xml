<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Dev on :: exploration and stuff ::</title>
    <link>https://smyrgeorge.github.io/categories/dev/</link>
    <description>Recent content in Dev on :: exploration and stuff ::</description>
    <generator>Hugo -- 0.130.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 16 Jul 2024 20:11:34 +0200</lastBuildDate>
    <atom:link href="https://smyrgeorge.github.io/categories/dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sqlx4k - Introduction to the Kotlin native and FFI (Part 2)</title>
      <link>https://smyrgeorge.github.io/posts/sqlx4k---introduction-to-the-kotlin-native-and-ffi-part-2/</link>
      <pubDate>Tue, 16 Jul 2024 20:11:34 +0200</pubDate>
      <guid>https://smyrgeorge.github.io/posts/sqlx4k---introduction-to-the-kotlin-native-and-ffi-part-2/</guid>
      <description>Introduction In the previous part of this series, I attempted to explain the importance of the Kotlin FFI (Foreign Function Interface) compatibility layer. As I mentioned, I believe it is a very effective way (at least for now) to leverage other ecosystems (such as the Rust ecosystem) to bring functionality to the Kotlin/Native ecosystem, in which I see a great deal of potential.
FFI Foreign Function Interface (FFI) is a programming feature that enables code written in one language to call and interact with code written in another language.</description>
    </item>
    <item>
      <title>Sqlx4k - Introduction to the Kotlin native and FFI (Part 1)</title>
      <link>https://smyrgeorge.github.io/posts/sqlx4k---introduction-to-the-kotlin-native-and-ffi-part-1/</link>
      <pubDate>Mon, 08 Jul 2024 13:26:07 +0200</pubDate>
      <guid>https://smyrgeorge.github.io/posts/sqlx4k---introduction-to-the-kotlin-native-and-ffi-part-1/</guid>
      <description>Introduction Recently, I began experimenting with the Kotlin Native platform. I initiated a new repository and attempted to create a simple project utilizing the ktor libraries. The purpose of the project was to recreate a small service that integrates some basic libraries and compile it to a native target (macosArm64 in my case). The service aimed to offer support for:
Dependency injection HTTP server Database access (PostgreSQL) Additionally, RabbitMQ support (though it isn&amp;rsquo;t a priority for now) In this first article of the series, I aim to describe how I ended up writing &amp;ldquo;low-level&amp;rdquo; code (FFI between Kotlin and Rust) and also to highlight the importance of native compatibility in Kotlin Native.</description>
    </item>
  </channel>
</rss>
